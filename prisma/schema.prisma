datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  user
  mod
  admin
  eventEditor
  postEditor
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String?
  email             String?             @unique
  role              Role                @default(user)
  title             String?
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  account           Account?
  sessions          Session[]
  discordAccount    DiscordAccount?
  Event             Event[]
  EventImage        EventImage[]
  ThumbnailImage    ThumbnailImage[]
  Post              Post[]
  EventRegistration EventRegistration[]
}

model DiscordAccount {
  id            Int       @id @default(autoincrement())
  discordId     String    @unique
  userId        Int       @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  username      String?
  discriminator String?
  avatar        String?
  accessToken   String?   @db.Text
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model BlackList {
  email String @unique
}

model Event {
  id                  Int             @id @default(autoincrement())
  title               String
  description         String?
  startDate           DateTime
  endDate             DateTime
  location            String?
  capacity            Int?
  registrationEnabled Boolean         @default(false)
  waitListEnabled     Boolean         @default(false)
  visible             Boolean         @default(true)
  thumbnailImage      ThumbnailImage?
  eventImages         EventImage[]
  author              User?           @relation(fields: [authorId], references: [id])
  authorId            Int?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  //default registratios if event is deleted
  EventRegistration EventRegistration[]
}

model EventRegistration {
  id        Int      @id @default(autoincrement())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  timestamp DateTime @default(now())
}

// Event Images for gallery
model EventImage {
  id        Int      @id @default(autoincrement())
  url       String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   Int?
}

// Thumbnail Images for events and posts
model ThumbnailImage {
  id        Int      @id @default(autoincrement())
  url       String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   Int?     @unique
}

// highlights Post
model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Feedback
model Feedback {
  id        Int      @id @default(autoincrement())
  subject   String
  feedback  String   @db.Text
  createdAt DateTime @default(now())
}
